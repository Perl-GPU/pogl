#ifdef GL_VERSION_1_0
if (!strncmp(name, "GL_", 3)) {
	i(GL_FALSE)
	i(GL_TRUE)
	i(GL_BYTE)
	i(GL_UNSIGNED_BYTE)
	i(GL_SHORT)
	i(GL_UNSIGNED_SHORT)
	i(GL_INT)
	i(GL_UNSIGNED_INT)
	i(GL_FLOAT)
	i(GL_DOUBLE)
	i(GL_2_BYTES)
	i(GL_3_BYTES)
	i(GL_4_BYTES)
	i(GL_LINES)
	i(GL_POINTS)
	i(GL_LINE_STRIP)
	i(GL_LINE_LOOP)
	i(GL_TRIANGLES)
	i(GL_TRIANGLE_STRIP)
	i(GL_TRIANGLE_FAN)
	i(GL_QUADS)
	i(GL_QUAD_STRIP)
	i(GL_POLYGON)
	i(GL_EDGE_FLAG)
	i(GL_V2F)
	i(GL_V3F)
	i(GL_C4UB_V2F)
	i(GL_C4UB_V3F)
	i(GL_C3F_V3F)
	i(GL_N3F_V3F)
	i(GL_C4F_N3F_V3F)
	i(GL_T2F_V3F)
	i(GL_T4F_V4F)
	i(GL_T2F_C4UB_V3F)
	i(GL_T2F_C3F_V3F)
	i(GL_T2F_N3F_V3F)
	i(GL_T2F_C4F_N3F_V3F)
	i(GL_T4F_C4F_N3F_V4F)
	i(GL_MATRIX_MODE)
	i(GL_MODELVIEW)
	i(GL_PROJECTION)
	i(GL_TEXTURE)
	i(GL_POINT_SMOOTH)
	i(GL_POINT_SIZE)
	i(GL_POINT_SIZE_GRANULARITY)
	i(GL_POINT_SIZE_RANGE)
	i(GL_LINE_SMOOTH)
	i(GL_LINE_STIPPLE)
	i(GL_LINE_STIPPLE_PATTERN)
	i(GL_LINE_STIPPLE_REPEAT)
	i(GL_LINE_WIDTH)
	i(GL_LINE_WIDTH_GRANULARITY)
	i(GL_LINE_WIDTH_RANGE)
	i(GL_POINT)
	i(GL_LINE)
	i(GL_FILL)
	i(GL_CCW)
	i(GL_CW)
	i(GL_FRONT)
	i(GL_BACK)
	i(GL_CULL_FACE)
	i(GL_CULL_FACE_MODE)
	i(GL_POLYGON_SMOOTH)
	i(GL_POLYGON_STIPPLE)
	i(GL_FRONT_FACE)
	i(GL_POLYGON_MODE)
	i(GL_COMPILE)
	i(GL_COMPILE_AND_EXECUTE)
	i(GL_LIST_BASE)
	i(GL_LIST_INDEX)
	i(GL_LIST_MODE)
	i(GL_NEVER)
	i(GL_LESS)
	i(GL_GEQUAL)
	i(GL_LEQUAL)
	i(GL_GREATER)
	i(GL_NOTEQUAL)
	i(GL_EQUAL)
	i(GL_ALWAYS)
	i(GL_DEPTH_TEST)
	i(GL_DEPTH_BITS)
	i(GL_DEPTH_CLEAR_VALUE)
	i(GL_DEPTH_FUNC)
	i(GL_DEPTH_RANGE)
	i(GL_DEPTH_WRITEMASK)
	i(GL_DEPTH_COMPONENT)
	i(GL_LIGHTING)
	i(GL_LIGHT0)
	i(GL_LIGHT1)
	i(GL_LIGHT2)
	i(GL_LIGHT3)
	i(GL_LIGHT4)
	i(GL_LIGHT5)
	i(GL_LIGHT6)
	i(GL_LIGHT7)
	i(GL_SPOT_EXPONENT)
	i(GL_SPOT_CUTOFF)
	i(GL_CONSTANT_ATTENUATION)
	i(GL_LINEAR_ATTENUATION)
	i(GL_QUADRATIC_ATTENUATION)
	i(GL_AMBIENT)
	i(GL_DIFFUSE)
	i(GL_SPECULAR)
	i(GL_SHININESS)
	i(GL_EMISSION)
	i(GL_POSITION)
	i(GL_SPOT_DIRECTION)
	i(GL_AMBIENT_AND_DIFFUSE)
	i(GL_COLOR_INDEXES)
	i(GL_LIGHT_MODEL_TWO_SIDE)
	i(GL_LIGHT_MODEL_LOCAL_VIEWER)
	i(GL_LIGHT_MODEL_AMBIENT)
	i(GL_FRONT_AND_BACK)
	i(GL_SHADE_MODEL)
	i(GL_FLAT)
	i(GL_SMOOTH)
	i(GL_COLOR_MATERIAL)
	i(GL_COLOR_MATERIAL_FACE)
	i(GL_COLOR_MATERIAL_PARAMETER)
	i(GL_NORMALIZE)
	i(GL_CLIP_PLANE0)
	i(GL_CLIP_PLANE1)
	i(GL_CLIP_PLANE2)
	i(GL_CLIP_PLANE3)
	i(GL_CLIP_PLANE4)
	i(GL_CLIP_PLANE5)
	i(GL_ACCUM_RED_BITS)
	i(GL_ACCUM_GREEN_BITS)
	i(GL_ACCUM_BLUE_BITS)
	i(GL_ACCUM_ALPHA_BITS)
	i(GL_ACCUM_CLEAR_VALUE)
	i(GL_ACCUM)
	i(GL_ADD)
	i(GL_LOAD)
	i(GL_MULT)
	i(GL_RETURN)
	i(GL_ALPHA_TEST)
	i(GL_ALPHA_TEST_REF)
	i(GL_ALPHA_TEST_FUNC)
	i(GL_BLEND)
	i(GL_BLEND_SRC)
	i(GL_BLEND_DST)
	i(GL_ZERO)
	i(GL_ONE)
	i(GL_SRC_COLOR)
	i(GL_ONE_MINUS_SRC_COLOR)
	i(GL_DST_COLOR)
	i(GL_ONE_MINUS_DST_COLOR)
	i(GL_SRC_ALPHA)
	i(GL_ONE_MINUS_SRC_ALPHA)
	i(GL_DST_ALPHA)
	i(GL_ONE_MINUS_DST_ALPHA)
	i(GL_SRC_ALPHA_SATURATE)
		/* OS/2 PM implementation does not have these constants... */
#if !defined(GL_SRC_ALPHA_SATURATE) || defined(GL_CONSTANT_COLOR)
	i(GL_CONSTANT_COLOR)
	i(GL_ONE_MINUS_CONSTANT_COLOR)
	i(GL_CONSTANT_ALPHA)
	i(GL_ONE_MINUS_CONSTANT_ALPHA)
#endif
	i(GL_FEEDBACK)
	i(GL_RENDER)
	i(GL_SELECT)
	i(GL_2D)
	i(GL_3D)
	i(GL_3D_COLOR)
	i(GL_3D_COLOR_TEXTURE)
	i(GL_4D_COLOR_TEXTURE)
	i(GL_POINT_TOKEN)
	i(GL_LINE_TOKEN)
	i(GL_LINE_RESET_TOKEN)
	i(GL_POLYGON_TOKEN)
	i(GL_BITMAP_TOKEN)
	i(GL_DRAW_PIXEL_TOKEN)
	i(GL_COPY_PIXEL_TOKEN)
	i(GL_PASS_THROUGH_TOKEN)
	i(GL_FEEDBACK_BUFFER_SIZE)
	i(GL_FEEDBACK_BUFFER_TYPE)
	i(GL_FOG)
	i(GL_FOG_MODE)
	i(GL_FOG_DENSITY)
	i(GL_FOG_COLOR)
	i(GL_FOG_INDEX)
	i(GL_FOG_START)
	i(GL_FOG_END)
	i(GL_LINEAR)
	i(GL_EXP)
	i(GL_EXP2)
	i(GL_LOGIC_OP)
	i(GL_LOGIC_OP_MODE)
	i(GL_CLEAR)
	i(GL_SET)
	i(GL_COPY)
	i(GL_COPY_INVERTED)
	i(GL_NOOP)
	i(GL_INVERT)
	i(GL_AND)
	i(GL_NAND)
	i(GL_OR)
	i(GL_NOR)
	i(GL_XOR)
	i(GL_EQUIV)
	i(GL_AND_REVERSE)
	i(GL_AND_INVERTED)
	i(GL_OR_REVERSE)
	i(GL_OR_INVERTED)
	i(GL_STENCIL_TEST)
	i(GL_STENCIL_WRITEMASK)
	i(GL_STENCIL_BITS)
	i(GL_STENCIL_FUNC)
	i(GL_STENCIL_VALUE_MASK)
	i(GL_STENCIL_REF)
	i(GL_STENCIL_FAIL)
	i(GL_STENCIL_PASS_DEPTH_PASS)
	i(GL_STENCIL_PASS_DEPTH_FAIL)
	i(GL_STENCIL_CLEAR_VALUE)
	i(GL_STENCIL_INDEX)
	i(GL_KEEP)
	i(GL_REPLACE)
	i(GL_INCR)
	i(GL_DECR)
	i(GL_NONE)
	i(GL_LEFT)
	i(GL_RIGHT)
	i(GL_FRONT)
	i(GL_BACK)
	i(GL_FRONT_AND_BACK)
	i(GL_FRONT_LEFT)
	i(GL_FRONT_RIGHT)
	i(GL_BACK_LEFT)
	i(GL_BACK_RIGHT)
	i(GL_AUX0)
	i(GL_AUX1)
	i(GL_AUX2)
	i(GL_AUX3)
	i(GL_COLOR_INDEX)
	i(GL_RED)
	i(GL_GREEN)
	i(GL_BLUE)
	i(GL_ALPHA)
	i(GL_LUMINANCE)
	i(GL_LUMINANCE_ALPHA)
	i(GL_ALPHA_BITS)
	i(GL_RED_BITS)
	i(GL_GREEN_BITS)
	i(GL_BLUE_BITS)
	i(GL_INDEX_BITS)
	i(GL_SUBPIXEL_BITS)
	i(GL_AUX_BUFFERS)
	i(GL_READ_BUFFER)
	i(GL_DRAW_BUFFER)
	i(GL_DOUBLEBUFFER)
	i(GL_STEREO)
	i(GL_BITMAP)
	i(GL_COLOR)
	i(GL_DEPTH)
	i(GL_STENCIL)
	i(GL_DITHER)
	i(GL_RGB)
	i(GL_RGBA)
	i(GL_MAX_LIST_NESTING)
	i(GL_MAX_ATTRIB_STACK_DEPTH)
	i(GL_MAX_MODELVIEW_STACK_DEPTH)
	i(GL_MAX_NAME_STACK_DEPTH)
	i(GL_MAX_PROJECTION_STACK_DEPTH)
	i(GL_MAX_TEXTURE_STACK_DEPTH)
	i(GL_MAX_EVAL_ORDER)
	i(GL_MAX_LIGHTS)
	i(GL_MAX_CLIP_PLANES)
	i(GL_MAX_TEXTURE_SIZE)
	i(GL_MAX_PIXEL_MAP_TABLE)
	i(GL_MAX_VIEWPORT_DIMS)
	i(GL_ATTRIB_STACK_DEPTH)
	i(GL_CLIENT_ATTRIB_STACK_DEPTH)
	i(GL_COLOR_CLEAR_VALUE)
	i(GL_COLOR_WRITEMASK)
	i(GL_CURRENT_INDEX)
	i(GL_CURRENT_COLOR)
	i(GL_CURRENT_NORMAL)
	i(GL_CURRENT_RASTER_COLOR)
	i(GL_CURRENT_RASTER_DISTANCE)
	i(GL_CURRENT_RASTER_INDEX)
	i(GL_CURRENT_RASTER_POSITION)
	i(GL_CURRENT_RASTER_TEXTURE_COORDS)
	i(GL_CURRENT_RASTER_POSITION_VALID)
	i(GL_CURRENT_TEXTURE_COORDS)
	i(GL_INDEX_CLEAR_VALUE)
	i(GL_INDEX_MODE)
	i(GL_INDEX_WRITEMASK)
	i(GL_MODELVIEW_MATRIX)
	i(GL_MODELVIEW_STACK_DEPTH)
	i(GL_NAME_STACK_DEPTH)
	i(GL_PROJECTION_MATRIX)
	i(GL_PROJECTION_STACK_DEPTH)
	i(GL_RENDER_MODE)
	i(GL_RGBA_MODE)
	i(GL_TEXTURE_MATRIX)
	i(GL_TEXTURE_STACK_DEPTH)
	i(GL_VIEWPORT)
	i(GL_AUTO_NORMAL)
	i(GL_MAP1_COLOR_4)
	i(GL_MAP1_GRID_DOMAIN)
	i(GL_MAP1_GRID_SEGMENTS)
	i(GL_MAP1_INDEX)
	i(GL_MAP1_NORMAL)
	i(GL_MAP1_TEXTURE_COORD_1)
	i(GL_MAP1_TEXTURE_COORD_2)
	i(GL_MAP1_TEXTURE_COORD_3)
	i(GL_MAP1_TEXTURE_COORD_4)
	i(GL_MAP1_VERTEX_3)
	i(GL_MAP1_VERTEX_4)
	i(GL_MAP2_COLOR_4)
	i(GL_MAP2_GRID_DOMAIN)
	i(GL_MAP2_GRID_SEGMENTS)
	i(GL_MAP2_INDEX)
	i(GL_MAP2_NORMAL)
	i(GL_MAP2_TEXTURE_COORD_1)
	i(GL_MAP2_TEXTURE_COORD_2)
	i(GL_MAP2_TEXTURE_COORD_3)
	i(GL_MAP2_TEXTURE_COORD_4)
	i(GL_MAP2_VERTEX_3)
	i(GL_MAP2_VERTEX_4)
	i(GL_COEFF)
	i(GL_DOMAIN)
	i(GL_ORDER)
	i(GL_FOG_HINT)
	i(GL_LINE_SMOOTH_HINT)
	i(GL_PERSPECTIVE_CORRECTION_HINT)
	i(GL_POINT_SMOOTH_HINT)
	i(GL_POLYGON_SMOOTH_HINT)
	i(GL_DONT_CARE)
	i(GL_FASTEST)
	i(GL_NICEST)
	i(GL_SCISSOR_TEST)
	i(GL_SCISSOR_BOX)
	i(GL_MAP_COLOR)
	i(GL_MAP_STENCIL)
	i(GL_INDEX_SHIFT)
	i(GL_INDEX_OFFSET)
	i(GL_RED_SCALE)
	i(GL_RED_BIAS)
	i(GL_GREEN_SCALE)
	i(GL_GREEN_BIAS)
	i(GL_BLUE_SCALE)
	i(GL_BLUE_BIAS)
	i(GL_ALPHA_SCALE)
	i(GL_ALPHA_BIAS)
	i(GL_DEPTH_SCALE)
	i(GL_DEPTH_BIAS)
	i(GL_PIXEL_MAP_S_TO_S_SIZE)
	i(GL_PIXEL_MAP_I_TO_I_SIZE)
	i(GL_PIXEL_MAP_I_TO_R_SIZE)
	i(GL_PIXEL_MAP_I_TO_G_SIZE)
	i(GL_PIXEL_MAP_I_TO_B_SIZE)
	i(GL_PIXEL_MAP_I_TO_A_SIZE)
	i(GL_PIXEL_MAP_R_TO_R_SIZE)
	i(GL_PIXEL_MAP_G_TO_G_SIZE)
	i(GL_PIXEL_MAP_B_TO_B_SIZE)
	i(GL_PIXEL_MAP_A_TO_A_SIZE)
	i(GL_PIXEL_MAP_S_TO_S)
	i(GL_PIXEL_MAP_I_TO_I)
	i(GL_PIXEL_MAP_I_TO_R)
	i(GL_PIXEL_MAP_I_TO_G)
	i(GL_PIXEL_MAP_I_TO_B)
	i(GL_PIXEL_MAP_I_TO_A)
	i(GL_PIXEL_MAP_R_TO_R)
	i(GL_PIXEL_MAP_G_TO_G)
	i(GL_PIXEL_MAP_B_TO_B)
	i(GL_PIXEL_MAP_A_TO_A)
	i(GL_PACK_ALIGNMENT)
	i(GL_PACK_LSB_FIRST)
	i(GL_PACK_ROW_LENGTH)
	i(GL_PACK_SKIP_PIXELS)
	i(GL_PACK_SKIP_ROWS)
	i(GL_PACK_SWAP_BYTES)
	i(GL_UNPACK_ALIGNMENT)
	i(GL_UNPACK_LSB_FIRST)
	i(GL_UNPACK_ROW_LENGTH)
	i(GL_UNPACK_SKIP_PIXELS)
	i(GL_UNPACK_SKIP_ROWS)
	i(GL_UNPACK_SWAP_BYTES)
	i(GL_ZOOM_X)
	i(GL_ZOOM_Y)
	i(GL_TEXTURE_ENV)
	i(GL_TEXTURE_ENV_MODE)
	i(GL_TEXTURE_1D)
	i(GL_TEXTURE_2D)
	i(GL_TEXTURE_WRAP_S)
	i(GL_TEXTURE_WRAP_T)
	i(GL_TEXTURE_MAG_FILTER)
	i(GL_TEXTURE_MIN_FILTER)
	i(GL_TEXTURE_ENV_COLOR)
	i(GL_TEXTURE_GEN_S)
	i(GL_TEXTURE_GEN_T)
	i(GL_TEXTURE_GEN_MODE)
	i(GL_TEXTURE_BORDER_COLOR)
	i(GL_TEXTURE_WIDTH)
	i(GL_TEXTURE_HEIGHT)
	i(GL_TEXTURE_BORDER)
	i(GL_TEXTURE_COMPONENTS)
	i(GL_TEXTURE_RED_SIZE)
	i(GL_TEXTURE_GREEN_SIZE)
	i(GL_TEXTURE_BLUE_SIZE)
	i(GL_TEXTURE_ALPHA_SIZE)
	i(GL_TEXTURE_LUMINANCE_SIZE)
	i(GL_TEXTURE_INTENSITY_SIZE)
	i(GL_NEAREST_MIPMAP_NEAREST)
	i(GL_NEAREST_MIPMAP_LINEAR)
	i(GL_LINEAR_MIPMAP_NEAREST)
	i(GL_LINEAR_MIPMAP_LINEAR)
	i(GL_OBJECT_LINEAR)
	i(GL_OBJECT_PLANE)
	i(GL_EYE_LINEAR)
	i(GL_EYE_PLANE)
	i(GL_SPHERE_MAP)
	i(GL_DECAL)
	i(GL_MODULATE)
	i(GL_NEAREST)
	i(GL_REPEAT)
	i(GL_CLAMP)
	i(GL_S)
	i(GL_T)
	i(GL_R)
	i(GL_Q)
	i(GL_TEXTURE_GEN_R)
	i(GL_TEXTURE_GEN_Q)
	i(GL_VENDOR)
	i(GL_RENDERER)
	i(GL_VERSION)
	i(GL_EXTENSIONS)
	i(GL_INVALID_VALUE)
	i(GL_INVALID_ENUM)
	i(GL_INVALID_OPERATION)
	i(GL_STACK_OVERFLOW)
	i(GL_STACK_UNDERFLOW)
	i(GL_OUT_OF_MEMORY)

#ifdef GL_VERSION_1_1
	i(GL_TEXTURE_RESIDENT)
	i(GL_TEXTURE_BINDING_1D)
	i(GL_TEXTURE_BINDING_2D)
	i(GL_TEXTURE_PRIORITY)
	i(GL_PROXY_TEXTURE_1D)
	i(GL_PROXY_TEXTURE_2D)
	i(GL_FEEDBACK_BUFFER_POINTER)
	i(GL_VERTEX_ARRAY)
	i(GL_NORMAL_ARRAY)
	i(GL_COLOR_ARRAY)
	i(GL_INDEX_ARRAY)
	i(GL_TEXTURE_COORD_ARRAY)
	i(GL_EDGE_FLAG_ARRAY)
	i(GL_VERTEX_ARRAY_SIZE)
	i(GL_VERTEX_ARRAY_TYPE)
	i(GL_VERTEX_ARRAY_STRIDE)
	i(GL_NORMAL_ARRAY_TYPE)
	i(GL_NORMAL_ARRAY_STRIDE)
	i(GL_COLOR_ARRAY_SIZE)
	i(GL_COLOR_ARRAY_TYPE)
	i(GL_COLOR_ARRAY_STRIDE)
	i(GL_INDEX_ARRAY_TYPE)
	i(GL_INDEX_ARRAY_STRIDE)
	i(GL_TEXTURE_COORD_ARRAY_SIZE)
	i(GL_TEXTURE_COORD_ARRAY_TYPE)
	i(GL_TEXTURE_COORD_ARRAY_STRIDE)
	i(GL_EDGE_FLAG_ARRAY_STRIDE)
	i(GL_VERTEX_ARRAY_POINTER)
	i(GL_NORMAL_ARRAY_POINTER)
	i(GL_COLOR_ARRAY_POINTER)
	i(GL_INDEX_ARRAY_POINTER)
	i(GL_TEXTURE_COORD_ARRAY_POINTER)
	i(GL_EDGE_FLAG_ARRAY_POINTER)
	i(GL_POLYGON_OFFSET_FACTOR)
	i(GL_POLYGON_OFFSET_UNITS)
	i(GL_POLYGON_OFFSET_POINT)
	i(GL_POLYGON_OFFSET_LINE)
	i(GL_POLYGON_OFFSET_FILL)
	i(GL_INDEX_LOGIC_OP)
	i(GL_COLOR_LOGIC_OP)
	i(GL_ALPHA4)
	i(GL_ALPHA8)
	i(GL_ALPHA12)
	i(GL_ALPHA16)
	i(GL_LUMINANCE4)
	i(GL_LUMINANCE8)
	i(GL_LUMINANCE12)
	i(GL_LUMINANCE16)
	i(GL_LUMINANCE4_ALPHA4)
	i(GL_LUMINANCE6_ALPHA2)
	i(GL_LUMINANCE8_ALPHA8)
	i(GL_LUMINANCE12_ALPHA4)
	i(GL_LUMINANCE12_ALPHA12)
	i(GL_LUMINANCE16_ALPHA16)
	i(GL_INTENSITY)
	i(GL_INTENSITY4)
	i(GL_INTENSITY8)
	i(GL_INTENSITY12)
	i(GL_INTENSITY16)
	i(GL_R3_G3_B2)
	i(GL_RGB4)
	i(GL_RGB5)
	i(GL_RGB8)
	i(GL_RGB10)
	i(GL_RGB12)
	i(GL_RGB16)
	i(GL_RGBA2)
	i(GL_RGBA4)
	i(GL_RGB5_A1)
	i(GL_RGBA8)
	i(GL_RGB10_A2)
	i(GL_RGBA12)
	i(GL_RGBA16)
#endif

#ifdef GL_VERSION_1_2

/* ADDED in 0.55 */

#ifndef GL_R3_G3_B2_EXT
#define GL_R3_G3_B2_EXT GL_R3_G3_B2
#endif

#ifndef GL_COLOR_TABLE_FORMAT_EXT
#define GL_COLOR_TABLE_FORMAT_EXT GL_COLOR_TABLE_FORMAT
#endif

#ifndef GL_COLOR_TABLE_WIDTH_EXT
#define GL_COLOR_TABLE_WIDTH_EXT GL_COLOR_TABLE_WIDTH
#endif

#ifndef GL_COLOR_TABLE_RED_SIZE_EXT
#define GL_COLOR_TABLE_RED_SIZE_EXT GL_COLOR_TABLE_RED_SIZE
#endif

#ifndef GL_COLOR_TABLE_GREEN_SIZE_EXT
#define GL_COLOR_TABLE_GREEN_SIZE_EXT GL_COLOR_TABLE_GREEN_SIZE
#endif

#ifndef GL_COLOR_TABLE_BLUE_SIZE_EXT
#define GL_COLOR_TABLE_BLUE_SIZE_EXT GL_COLOR_TABLE_BLUE_SIZE
#endif

#ifndef GL_COLOR_TABLE_ALPHA_SIZE_EXT
#define GL_COLOR_TABLE_ALPHA_SIZE_EXT GL_COLOR_TABLE_ALPHA_SIZE
#endif

#ifndef GL_COLOR_TABLE_LUMINANCE_SIZE_EXT
#define GL_COLOR_TABLE_LUMINANCE_SIZE_EXT GL_COLOR_TABLE_LUMINANCE_SIZE
#endif

#ifndef GL_COLOR_TABLE_INTENSITY_SIZE_EXT
#define GL_COLOR_TABLE_INTENSITY_SIZE_EXT GL_COLOR_TABLE_INTENSITY_SIZE
#endif

/* ADDED in 0.55 */

/* ErrorCode */
	i(GL_NO_ERROR)

/* GetTarget */
	i(GL_MAX_CLIENT_ATTRIB_STACK_DEPTH)
	i(GL_SELECTION_BUFFER_POINTER)
	i(GL_SELECTION_BUFFER_SIZE)

/* GetTextureParameter */
	i(GL_TEXTURE_INTERNAL_FORMAT)
#else

// fake bgr constants so OpenGL::Image::Targa will work on GL1.1
#ifdef GL_EXT_bgra
	i(GL_BGR)
	i(GL_BGRA)
#endif

#endif

/* 18 */ // TODO: i'm not sure these are real, don't see them in gl.h or the exts
#ifdef GL_EXT_cmyka
	i(GL_CMYK)
	i(GL_CMYKA)
	i(GL_PACK_CMYK_HINT)
	i(GL_UNPACK_CMYK_HINT)
#endif

/* 30 */
#if defined(GL_EXT_vertex_array)
#  ifndef GL_EXT_vertex_array_is_faked // TODO: what the hell is this about?
	i(GL_VERTEX_ARRAY_COUNT_EXT)
	i(GL_NORMAL_ARRAY_COUNT_EXT)
	i(GL_COLOR_ARRAY_COUNT_EXT)
	i(GL_INDEX_ARRAY_COUNT_EXT)
	i(GL_TEXTURE_COORD_ARRAY_COUNT_EXT)
	i(GL_EDGE_FLAG_ARRAY_COUNT_EXT)
#  endif
#endif

/* 79 */
#if defined(GL_EXT_clip_volume_hint) && defined(GL_VOLUME_CLIPPING_HINT_EXT)
	i(GL_VOLUME_CLIPPING_HINT_EXT)
#endif

#if defined(GL_EXT_paletted_texture)
	i(GL_COLOR_TABLE_FORMAT_EXT)
	i(GL_COLOR_TABLE_WIDTH_EXT)
	i(GL_COLOR_TABLE_RED_SIZE_EXT)
	i(GL_COLOR_TABLE_GREEN_SIZE_EXT)
	i(GL_COLOR_TABLE_BLUE_SIZE_EXT)
	i(GL_COLOR_TABLE_ALPHA_SIZE_EXT)
	i(GL_COLOR_TABLE_LUMINANCE_SIZE_EXT)
	i(GL_COLOR_TABLE_INTENSITY_SIZE_EXT)
#endif

#if defined(GL_EXT_Cg_shader)
	i(GL_CG_VERTEX_SHADER_EXT)
	i(GL_CG_FRAGMENT_SHADER_EXT)
#endif

/* FROM glext_procs.h */
#if defined(__glext_procs_h_)
#include "glext_consts.h"
#endif

	i(GL_CURRENT_BIT)
	i(GL_POINT_BIT)
	i(GL_LINE_BIT)
	i(GL_POLYGON_BIT)
	i(GL_POLYGON_STIPPLE_BIT)
	i(GL_PIXEL_MODE_BIT)
	i(GL_LIGHTING_BIT)
	i(GL_FOG_BIT)
	i(GL_DEPTH_BUFFER_BIT)
	i(GL_ACCUM_BUFFER_BIT)
	i(GL_STENCIL_BUFFER_BIT)
	i(GL_VIEWPORT_BIT)
	i(GL_TRANSFORM_BIT)
	i(GL_ENABLE_BIT)
	i(GL_COLOR_BUFFER_BIT)
	i(GL_HINT_BIT)
	i(GL_EVAL_BIT)
	i(GL_LIST_BIT)
	i(GL_TEXTURE_BIT)
	i(GL_SCISSOR_BIT)
	i(GL_ALL_ATTRIB_BITS)
	i(GL_CLIENT_PIXEL_STORE_BIT)
	i(GL_CLIENT_VERTEX_ARRAY_BIT)

	i(MAX_GL_TEXPARAMETER_COUNT)
	i(MAX_GL_TEXENV_COUNT)
	i(MAX_GL_TEXGEN_COUNT)
	i(MAX_GL_MATERIAL_COUNT)
	i(MAX_GL_MAP_COUNT)
	i(MAX_GL_LIGHT_COUNT)
	i(MAX_GL_LIGHTMODEL_COUNT)
	i(MAX_GL_FOG_COUNT)
	i(MAX_GL_GET_COUNT)

/* 
 * Mesa 3D version 3.3 and 3.4 define GL_ALL_CLIENT_ATTRIB_BITS The
 * OpenGL Specification (1.1 and 1.2) defines this macro as well. Older
 * versions of Mesa3D used to have GL_CLIENT_ALL_ATTRIB_BITS. Older
 * versions of this module, and much code out there also uses this older
 * macro.
 * 
 * To be fully backward compatible, but also to be correct, both will be
 * defined here, copied from each other. This should ensure that this
 * compiles and works against any OpenGL library that uses either, and
 * allow code that uses either.
 */
#if defined(GL_ALL_CLIENT_ATTRIB_BITS) && !defined(GL_CLIENT_ALL_ATTRIB_BITS)
#define GL_CLIENT_ALL_ATTRIB_BITS GL_ALL_CLIENT_ATTRIB_BITS
#elif !defined(GL_ALL_CLIENT_ATTRIB_BITS) && defined(GL_CLIENT_ALL_ATTRIB_BITS)
#define GL_ALL_CLIENT_ATTRIB_BITS GL_CLIENT_ALL_ATTRIB_BITS
#endif
	i(GL_ALL_CLIENT_ATTRIB_BITS)
	i(GL_CLIENT_ALL_ATTRIB_BITS)
}
/* else */
#endif
